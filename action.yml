name: 'ufbt wrapper'
description: 'Configures ufbt for use in the current project'

inputs:
  path:
    description: "Path to source code (if not the root of repository)"
    required: false
    default: "."

  sdk-channel:
    description: Release channel to use
    required: false
    default: ""

  sdk-branch:
    description: Branch to use for updates
    required: false
    default: ""

  sdk-index:
    description: Index to use for updates
    required: false
    default: ""

  sdk-file:
    description: Path to SDK archive
    required: false
    default: ""

  sdk-url:
    description: URL to SDK archive
    required: false
    default: ""

  sdk-hw-target:
    description: Hardware target to use
    required: false
    default: ""

  use-ufbt-version:
    description: ufbt version to use. Can be 'latest', 'prerelease' or a specific version
    required: false
    default: latest

  skip-setup:
    description: Skip ufbt setup. Useful for multiple invocation of the action
    required: false
    default: ${{ false }}

outputs:
  sdk-version:
    description: SDK version
    value: ${{ steps.ufbt-status.outputs.ufbt_version }}

  fap-artifacts:
    description: "Application build artifacts"
    value: ${{ steps.build-fap.outputs.build_artifacts }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      if: inputs.skip-setup == 'false'
      with:
        python-version: '3.11'

    - name: Install ufbt
      if: inputs.skip-setup == 'false'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ "${{ inputs.use-ufbt-version }}" == "prerelease" ]; then
          pip install ufbt --pre
        elif [ "${{ inputs.use-ufbt-version }}" != "latest" ]; then
          pip install ufbt==${{ inputs.use-ufbt-version }}
        else 
          pip install ufbt
        fi
        
    - name: Update ufbt
      shell: bash
      run: |
        UFBT_UPDATE_ARGS=""
        if [ -n "${{ inputs.sdk-hw-target }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --hw-target ${{ inputs.sdk-hw-target }}"
        fi
        if [ -n "${{ inputs.sdk-channel }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --channel ${{ inputs.sdk-channel }}"
        fi
        if [ -n "${{ inputs.sdk-branch }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --branch ${{ inputs.sdk-branch }}"
        fi
        if [ -n "${{ inputs.sdk-index }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --index-url ${{ inputs.sdk-index }}"
        fi
        if [ -n "${{ inputs.sdk-file }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --local ${{ inputs.sdk-file }}"
        fi
        if [ -n "${{ inputs.sdk-url }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --url ${{ inputs.sdk-url }}"
        fi
        ufbt update $UFBT_UPDATE_ARGS

    - name: Get ufbt status
      id: ufbt-raw-status
      shell: bash
      run: |
        echo "ufbt_raw_status=$(ufbt status --json)" >> $GITHUB_ENV
        echo "metadata=${{fromJSON(env.ufbt_raw_status)}}" >> $GITHUB_OUTPUT

    - name: Extract ufbt status
      id: ufbt-status
      shell: bash
      run: |
        # UFBT_STATE=$(ufbt status --json)
        # echo "ufbt_raw_state=${UFBT_STATE}" >> $GITHUB_STATE
        # echo "all_metadata=${{fromJSON($UFBT_STATE)}}" >> $GITHUB_ENV

        echo "ufbt_version=$(ufbt status ufbt_version)" >> $GITHUB_OUTPUT
        echo "sdk_dir=$(ufbt status sdk_dir)" >> $GITHUB_OUTPUT
        echo "toolchain_dir=$(ufbt status state_dir)/toolchain" >> $GITHUB_OUTPUT
        echo "toolchain_version=`bash -c "export $(grep FBT_TOOLCHAIN_VERSION\= $(ufbt status sdk_dir)/scripts/toolchain/fbtenv.sh) printenv FBT_TOOLCHAIN_VERSION"`" >> $GITHUB_OUTPUT
        echo "actual_toolchain_version=`cat $(ufbt status state_dir)/toolchain/*/VERSION 2>/dev/null || echo 0`" >> $GITHUB_OUTPUT
        # echo "all_metadata=${{fromJSON($UFBT_STATE)}}" >> $GITHUB_OUTPUT
        
    - name: Cache toolchain
      uses: actions/cache@v3
      if: steps.ufbt-status.outputs.toolchain_version != steps.ufbt-status.outputs.actual_toolchain_version
      with:
        path: ${{ steps.ufbt-status.outputs.toolchain_dir }}
        key: ${{ runner.os }}-fbt-toolchain-${{ steps.ufbt-status.outputs.toolchain_version }}

    - name: Set fap source path
      id: set-fap-path
      shell: bash
      run: |
        echo "Metadata for ufbt status: ${{ steps.ufbt-status.outputs.all_metadata.target }}"
        echo "fap_path=$GITHUB_WORKSPACE/${{ inputs.path }}" >> $GITHUB_OUTPUT
        # if [ -z ${{ inputs.path }} ]; then
        #   echo "fap_path=$GITHUB_WORKSPACE" >> $GITHUB_OUTPUT
        # else
        #   echo "fap_path=$GITHUB_WORKSPACE/${{ inputs.path }}" >> $GITHUB_OUTPUT
        # fi
    
    - name: Build app
      id: build-fap
      shell: bash
      run: |
        pushd ${{ steps.set-fap-path.outputs.fap_path }}
        ufbt
        DIST_PATH=`pwd`/dist
        echo "build_artifacts=$(ls $DIST_PATH/*.fap)" >> $GITHUB_OUTPUT

    - name: Upload app artifacts
      uses: actions/upload-artifact@v3
      with:
        name: app-artifacts
        path: ${{ steps.build-fap.outputs.build_artifacts }}
