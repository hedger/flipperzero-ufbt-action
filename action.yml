name: ufbt wrapper action
author: "@hedger"
description: Configures ufbt for use in the current project
branding:
  icon: 'check'
  color: 'green'

inputs:
  path:
    description: Path to source code (if not the root of repository)
    required: false
    default: "."

  task: 
    description: "Task to run. Valid values: 'build', 'lint', 'none'"
    required: false
    default: build

  sdk-channel:
    description: Release channel to use. Matches argument "--channel" for ufbt update
    required: false
    default: ""

  sdk-branch:
    description: Branch to use for updates. Matches argument "--branch" for ufbt update
    required: false
    default: ""

  sdk-index-url:
    description: Index URL to use for updates. Matches argument "--index-url" for ufbt update
    required: false
    default: ""

  sdk-file:
    description: Path to SDK archive. Matches argument "--local" for ufbt update
    required: false
    default: ""

  sdk-url:
    description: URL to SDK archive. Matches argument "--url" for ufbt update
    required: false
    default: ""

  sdk-hw-target:
    description: Hardware target to use. Matches argument "--hw-target" for ufbt update
    required: false
    default: ""

  use-ufbt-version:
    description: ufbt version to use. Can be 'latest', 'prerelease' or a specific version from PyPI
    required: false
    default: latest

  skip-setup:
    description: Skip ufbt setup. Useful for multiple invocation of the action
    required: false
    default: ${{ false }}

outputs:
  fap-artifacts:
    description: "Build artifacts"
    value: ${{ steps.build-fap.outputs.build_artifacts }}

  fap-dir:
    description: "Directory containing application build artifacts"
    value: ${{ steps.build-fap.outputs.dist_dir }}

  ufbt-status:
    description: JSON status object for ufbt. Use with fromJSON()
    value: ${{ steps.ufbt-status.outputs.json }}

  toolchain-version:
    description: Toolchain version
    value: ${{ steps.get-tooclhain-version.outputs.required-version }}

  lint-messages:
    description: Lint messages
    value: ${{ steps.lint-app.outputs.lint-messages }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v3
      if: inputs.skip-setup == 'false'
      with:
        python-version: '3.8'

    - name: Install ufbt
      if: inputs.skip-setup == 'false'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ "${{ inputs.use-ufbt-version }}" == "prerelease" ]; then
          pip install --upgrade --pre ufbt
        elif [ "${{ inputs.use-ufbt-version }}" != "latest" ]; then
          pip install --upgrade ufbt==${{ inputs.use-ufbt-version }}
        else 
          pip install --upgrade ufbt
        fi
        
    - name: Update ufbt
      shell: bash
      run: |
        UFBT_UPDATE_ARGS=""
        if [ -n "${{ inputs.sdk-hw-target }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --hw-target ${{ inputs.sdk-hw-target }}"
        fi
        if [ -n "${{ inputs.sdk-channel }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --channel ${{ inputs.sdk-channel }}"
        fi
        if [ -n "${{ inputs.sdk-branch }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --branch ${{ inputs.sdk-branch }}"
        fi
        if [ -n "${{ inputs.sdk-index-url }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --index-url ${{ inputs.sdk-index-url }}"
        fi
        if [ -n "${{ inputs.sdk-file }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --local ${{ inputs.sdk-file }}"
        fi
        if [ -n "${{ inputs.sdk-url }}" ]; then
          UFBT_UPDATE_ARGS="$UFBT_UPDATE_ARGS --url ${{ inputs.sdk-url }}"
        fi
        ufbt update $UFBT_UPDATE_ARGS

    - name: Get ufbt status as JSON
      id: ufbt-status
      shell: bash
      run: |
        echo "json=$(ufbt status --json)" >> $GITHUB_OUTPUT

    - name: Check toolchain version
      id: get-tooclhain-version
      shell: bash
      run: |
        echo "required-version=`bash -c "export $(grep FBT_TOOLCHAIN_VERSION\= ${{ fromJSON(steps.ufbt-status.outputs.json).sdk_dir }}/scripts/toolchain/fbtenv.sh) printenv FBT_TOOLCHAIN_VERSION"`" >> $GITHUB_OUTPUT
        echo "deployed-version=`cat ${{ fromJSON(steps.ufbt-status.outputs.json).toolchain_dir }}/*/VERSION 2>/dev/null || echo 0`" >> $GITHUB_OUTPUT
        
    - name: Cache toolchain
      uses: actions/cache@v3
      if: steps.get-tooclhain-version.outputs.required-version != steps.get-tooclhain-version.outputs.deployed-version
      with:
        path: ${{ fromJSON(steps.ufbt-status.outputs.json).toolchain_dir }}
        key: ${{ runner.os }}-fbt-toolchain-${{ steps.get-tooclhain-version.outputs.required-version }}
    
    - name: Add problem matcher
      shell: bash
      run: |
        echo "::add-matcher::${{ github.action_path }}/ufbt-problem-matcher.json" 

    - name: Build app
      id: build-fap
      if: inputs.task == 'build'
      shell: bash
      run: |
        FAP_SRC_PATH=$GITHUB_WORKSPACE/${{ inputs.path }}
        DIST_PATH=$FAP_SRC_PATH/dist
        cd $FAP_SRC_PATH && ufbt
        echo "dist_dir=$DIST_PATH" >> $GITHUB_OUTPUT
        echo "build_artifacts=$(ls $DIST_PATH/*.fap)" >> $GITHUB_OUTPUT

    - name: Lint sources
      id: lint-app
      if: inputs.task == 'lint'
      shell: bash
      run: |
        FAP_SRC_PATH=$GITHUB_WORKSPACE/${{ inputs.path }}
        # Capture output with tee and error code
        # set -o pipefail
        LINT_MESSAGES=$(cd $FAP_SRC_PATH && ufbt lint 2>&1 | tee /dev/fd/2)
        # Capture error code
        LINT_STATUS=${PIPESTATUS[0]}
        if [ $LINT_STATUS -eq 0 ]; then
          echo "Lint passed" >> $GITHUB_STEP_SUMMARY
        else 
          # Save multiline output
          echo "lint-messages<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Lint errors:\n\`\`\`\n" >> $GITHUB_STEP_SUMMARY
          echo $LINT_MESSAGES >> $GITHUB_STEP_SUMMARY
          echo "\n\`\`\`\n" >> $GITHUB_STEP_SUMMARY
          # Exit with error code
          cat $GITHUB_STEP_SUMMARY
          exit $LINT_STATUS
        fi
